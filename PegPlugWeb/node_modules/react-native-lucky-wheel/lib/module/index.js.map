{"version":3,"names":["LuckyWheel","GestureTypes","EasingTypes","TextAngles"],"sources":["index.tsx"],"sourcesContent":["import type { ImageSourcePropType } from 'react-native';\nimport type { TextProps } from 'react-native-svg';\n\nimport { LuckyWheel } from './components';\n\ntype RGB = `rgb(${number}, ${number}, ${number})`;\ntype RGBA = `rgba(${number}, ${number}, ${number}, ${number})`;\ntype HEX = `#${string}`;\n\nexport type Color = RGB | RGBA | HEX | string;\n\nexport enum GestureTypes {\n  CLOCKWISE = 'clockwise',\n  ANTI_CLOCKWISE = 'anti-clockwise',\n  MULTIDIRECTIONAL = 'multidirectional',\n}\n\nexport type GestureType =\n  | GestureTypes\n  | GestureTypes.CLOCKWISE\n  | GestureTypes.ANTI_CLOCKWISE\n  | GestureTypes.MULTIDIRECTIONAL;\n\nexport enum EasingTypes {\n  OUT = 'out',\n  IN_OUT = 'in_out',\n}\n\nexport type EasingType = EasingTypes | EasingTypes.IN_OUT | EasingTypes.OUT;\n\nexport enum TextAngles {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal',\n}\n\nexport type TextAngleType =\n  | TextAngles\n  | TextAngles.HORIZONTAL\n  | TextAngles.VERTICAL;\n\ninterface ITextStyle extends TextProps {\n  color?: Color;\n}\n\ninterface RandomColorOptionsSingle {\n  hue?: number | string | undefined;\n  luminosity?: 'bright' | 'light' | 'dark' | 'random' | undefined;\n  seed?: number | string | undefined;\n  format?:\n    | 'hsvArray'\n    | 'hslArray'\n    | 'hsl'\n    | 'hsla'\n    | 'rgbArray'\n    | 'rgb'\n    | 'rgba'\n    | 'hex'\n    | undefined;\n  alpha?: number | undefined;\n}\n\ntype ISlice = {\n  text: string;\n  color?: Color;\n  textStyle?: ITextStyle;\n};\n\nexport interface IWheelText {\n  x: number;\n  y: number;\n  payload: ISlice;\n  i: number;\n}\n\ninterface ICustomKnob {\n  color: Color;\n  size: number;\n}\n\ninterface ILuckyWheelRequiredProps {\n  slices: ISlice[];\n}\n\nexport interface ILuckyWheelOptionalProps {\n  padAngle: number;\n  outerRadius: number;\n  innerRadius: number;\n  duration: number;\n  enableGesture: boolean;\n  enablePhysics: boolean;\n  enableOuterDots: boolean;\n  gestureType: GestureType;\n  size: number;\n  winnerIndex?: number;\n  minimumSpinVelocity: number;\n  textStyle: ITextStyle;\n  textAngle: TextAngleType;\n  backgroundColorOptions: RandomColorOptionsSingle;\n  offset: number;\n  backgroundColor: Color;\n  knobSize: number;\n  knobColor: Color;\n  easing: EasingType;\n  dotColor: Color;\n  onKnobTick?: () => void;\n  onSpinningStart?: () => void;\n  onSpinningEnd?: (winner: ISlice) => void;\n  source?: ImageSourcePropType;\n  customKnob?: (params: ICustomKnob) => React.ReactChild;\n  customText?: (params: IWheelText) => React.ReactChild;\n  waitWinner: boolean;\n  enableInnerShadow: boolean;\n}\n\nexport interface ILuckyWheel\n  extends ILuckyWheelRequiredProps,\n    ILuckyWheelOptionalProps {}\n\nexport type LuckyWheelHandle = {\n  start: (cb?: () => void) => void;\n  stop: () => void;\n  reset: () => void;\n};\n\nexport default LuckyWheel;\n"],"mappings":"AAGA,SAASA,UAAT,QAA2B,cAA3B;AAQA,WAAYC,YAAZ;;WAAYA,Y;EAAAA,Y;EAAAA,Y;EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAYZ,WAAYC,WAAZ;;WAAYA,W;EAAAA,W;EAAAA,W;GAAAA,W,KAAAA,W;;AAOZ,WAAYC,UAAZ;;WAAYA,U;EAAAA,U;EAAAA,U;GAAAA,U,KAAAA,U;;AA8FZ,eAAeH,UAAf"}